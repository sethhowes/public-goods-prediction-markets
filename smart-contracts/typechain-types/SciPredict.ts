/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace SciPredict {
  export type PredictionInstanceStruct = {
    predictionQuestion: PromiseOrValue<string>;
    unit: PromiseOrValue<string>;
    unitIncrement: PromiseOrValue<BigNumberish>;
    predictionBucket: PromiseOrValue<BigNumberish>[];
    rewardAmount: PromiseOrValue<BigNumberish>;
    rewardToken: PromiseOrValue<string>;
    incentiveCurve: PromiseOrValue<string>;
    permissioned: PromiseOrValue<boolean>;
    deadline: PromiseOrValue<BigNumberish>;
    category: PromiseOrValue<string>;
    id: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    currentPrediction: PromiseOrValue<BigNumberish>;
    committedAmountBucket: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
  };

  export type PredictionInstanceStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber[],
    BigNumber,
    string,
    string,
    boolean,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    [BigNumber, BigNumber, BigNumber]
  ] & {
    predictionQuestion: string;
    unit: string;
    unitIncrement: BigNumber;
    predictionBucket: BigNumber[];
    rewardAmount: BigNumber;
    rewardToken: string;
    incentiveCurve: string;
    permissioned: boolean;
    deadline: BigNumber;
    category: string;
    id: BigNumber;
    owner: string;
    currentPrediction: BigNumber;
    committedAmountBucket: [BigNumber, BigNumber, BigNumber];
  };
}

export interface SciPredictInterface extends utils.Interface {
  functions: {
    "claimFunds(uint256,uint256)": FunctionFragment;
    "createPrediction(string,string,uint256,uint256[],uint256,address,string,bool,uint256,string)": FunctionFragment;
    "getCurrentPrediction(uint256)": FunctionFragment;
    "getLivePredictionIds()": FunctionFragment;
    "isWhitelisted()": FunctionFragment;
    "placeBet(uint256,uint256)": FunctionFragment;
    "predictionMarkets(uint256)": FunctionFragment;
    "totalPredictions()": FunctionFragment;
    "updateLivePredictionIds()": FunctionFragment;
    "viewPrediction(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimFunds"
      | "createPrediction"
      | "getCurrentPrediction"
      | "getLivePredictionIds"
      | "isWhitelisted"
      | "placeBet"
      | "predictionMarkets"
      | "totalPredictions"
      | "updateLivePredictionIds"
      | "viewPrediction"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimFunds",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createPrediction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrediction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLivePredictionIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "placeBet",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "predictionMarkets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPredictions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateLivePredictionIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewPrediction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "claimFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPrediction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrediction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLivePredictionIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "placeBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "predictionMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPredictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLivePredictionIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewPrediction",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SciPredict extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SciPredictInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimFunds(
      predictionId: PromiseOrValue<BigNumberish>,
      correctBucketIndex: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPrediction(
      predictionQuestion: PromiseOrValue<string>,
      unit: PromiseOrValue<string>,
      unitIncrement: PromiseOrValue<BigNumberish>,
      predictionBucket: PromiseOrValue<BigNumberish>[],
      rewardAmount: PromiseOrValue<BigNumberish>,
      rewardToken: PromiseOrValue<string>,
      incentiveCurve: PromiseOrValue<string>,
      permissioned: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      category: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCurrentPrediction(
      predictionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLivePredictionIds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    isWhitelisted(overrides?: CallOverrides): Promise<[boolean]>;

    placeBet(
      predictionId: PromiseOrValue<BigNumberish>,
      bucketIndex: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    predictionMarkets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber
      ] & {
        predictionQuestion: string;
        unit: string;
        unitIncrement: BigNumber;
        rewardAmount: BigNumber;
        rewardToken: string;
        incentiveCurve: string;
        permissioned: boolean;
        deadline: BigNumber;
        category: string;
        id: BigNumber;
        owner: string;
        currentPrediction: BigNumber;
      }
    >;

    totalPredictions(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateLivePredictionIds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    viewPrediction(
      predictionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[SciPredict.PredictionInstanceStructOutput]>;
  };

  claimFunds(
    predictionId: PromiseOrValue<BigNumberish>,
    correctBucketIndex: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPrediction(
    predictionQuestion: PromiseOrValue<string>,
    unit: PromiseOrValue<string>,
    unitIncrement: PromiseOrValue<BigNumberish>,
    predictionBucket: PromiseOrValue<BigNumberish>[],
    rewardAmount: PromiseOrValue<BigNumberish>,
    rewardToken: PromiseOrValue<string>,
    incentiveCurve: PromiseOrValue<string>,
    permissioned: PromiseOrValue<boolean>,
    deadline: PromiseOrValue<BigNumberish>,
    category: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCurrentPrediction(
    predictionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLivePredictionIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  isWhitelisted(overrides?: CallOverrides): Promise<boolean>;

  placeBet(
    predictionId: PromiseOrValue<BigNumberish>,
    bucketIndex: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  predictionMarkets(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      boolean,
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber
    ] & {
      predictionQuestion: string;
      unit: string;
      unitIncrement: BigNumber;
      rewardAmount: BigNumber;
      rewardToken: string;
      incentiveCurve: string;
      permissioned: boolean;
      deadline: BigNumber;
      category: string;
      id: BigNumber;
      owner: string;
      currentPrediction: BigNumber;
    }
  >;

  totalPredictions(overrides?: CallOverrides): Promise<BigNumber>;

  updateLivePredictionIds(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  viewPrediction(
    predictionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<SciPredict.PredictionInstanceStructOutput>;

  callStatic: {
    claimFunds(
      predictionId: PromiseOrValue<BigNumberish>,
      correctBucketIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createPrediction(
      predictionQuestion: PromiseOrValue<string>,
      unit: PromiseOrValue<string>,
      unitIncrement: PromiseOrValue<BigNumberish>,
      predictionBucket: PromiseOrValue<BigNumberish>[],
      rewardAmount: PromiseOrValue<BigNumberish>,
      rewardToken: PromiseOrValue<string>,
      incentiveCurve: PromiseOrValue<string>,
      permissioned: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      category: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentPrediction(
      predictionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLivePredictionIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    isWhitelisted(overrides?: CallOverrides): Promise<boolean>;

    placeBet(
      predictionId: PromiseOrValue<BigNumberish>,
      bucketIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    predictionMarkets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber
      ] & {
        predictionQuestion: string;
        unit: string;
        unitIncrement: BigNumber;
        rewardAmount: BigNumber;
        rewardToken: string;
        incentiveCurve: string;
        permissioned: boolean;
        deadline: BigNumber;
        category: string;
        id: BigNumber;
        owner: string;
        currentPrediction: BigNumber;
      }
    >;

    totalPredictions(overrides?: CallOverrides): Promise<BigNumber>;

    updateLivePredictionIds(overrides?: CallOverrides): Promise<void>;

    viewPrediction(
      predictionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SciPredict.PredictionInstanceStructOutput>;
  };

  filters: {};

  estimateGas: {
    claimFunds(
      predictionId: PromiseOrValue<BigNumberish>,
      correctBucketIndex: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPrediction(
      predictionQuestion: PromiseOrValue<string>,
      unit: PromiseOrValue<string>,
      unitIncrement: PromiseOrValue<BigNumberish>,
      predictionBucket: PromiseOrValue<BigNumberish>[],
      rewardAmount: PromiseOrValue<BigNumberish>,
      rewardToken: PromiseOrValue<string>,
      incentiveCurve: PromiseOrValue<string>,
      permissioned: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      category: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCurrentPrediction(
      predictionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLivePredictionIds(overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelisted(overrides?: CallOverrides): Promise<BigNumber>;

    placeBet(
      predictionId: PromiseOrValue<BigNumberish>,
      bucketIndex: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    predictionMarkets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalPredictions(overrides?: CallOverrides): Promise<BigNumber>;

    updateLivePredictionIds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    viewPrediction(
      predictionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimFunds(
      predictionId: PromiseOrValue<BigNumberish>,
      correctBucketIndex: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPrediction(
      predictionQuestion: PromiseOrValue<string>,
      unit: PromiseOrValue<string>,
      unitIncrement: PromiseOrValue<BigNumberish>,
      predictionBucket: PromiseOrValue<BigNumberish>[],
      rewardAmount: PromiseOrValue<BigNumberish>,
      rewardToken: PromiseOrValue<string>,
      incentiveCurve: PromiseOrValue<string>,
      permissioned: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      category: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentPrediction(
      predictionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLivePredictionIds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelisted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeBet(
      predictionId: PromiseOrValue<BigNumberish>,
      bucketIndex: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    predictionMarkets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPredictions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateLivePredictionIds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    viewPrediction(
      predictionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
